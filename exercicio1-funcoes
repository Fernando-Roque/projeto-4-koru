// üíª Exerc√≠cio 1: Revis√£o de Fun√ß√µes, Spread e Rest

// 1. Fun√ß√£o tradicional
function sum(a, b) {
  return a + b;
}

// 2. Arrow function
const multiply = (a, b) => a * b;

// 3. Fun√ß√£o com rest parameters
function calculateAverage(...numbers) {
  if (numbers.length === 0) return 0;

  let sum = 0;
  for (let i = 0; i < numbers.length; i++) {
    sum += numbers[i];
  }

  return sum / numbers.length;
}

// 4. Usando spread operator com arrays
const fruits = ["ma√ß√£", "banana", "laranja"];
const moreFruits = ["uva", "kiwi"];
const allFruits = [...fruits, ...moreFruits];

// 5. Usando spread com objetos
const person = { name: "Maria", age: 25 };
const employee = { ...person, id: 1001, department: "Engenharia" };

// Testes das fun√ß√µes
console.log("Soma:", sum(5, 3));
console.log("Multiplica√ß√£o:", multiply(5, 3));
console.log("M√©dia de 3 n√∫meros:", calculateAverage(4, 6, 8));
console.log("M√©dia de 5 n√∫meros:", calculateAverage(4, 6, 8, 10, 12));
console.log("Frutas combinadas:", allFruits);
console.log("Objeto funcion√°rio:", employee);

// üöÄ DESAFIOS

// a. Fun√ß√£o que recebe um objeto person e adiciona a propriedade "isAdult"
function addIsAdult(person) {
  return {
    ...person,
    isAdult: person.age >= 18
  };
}

// Teste da fun√ß√£o addIsAdult
const pessoaTeste = { name: "Jo√£o", age: 20 };
console.log("Pessoa com isAdult:", addIsAdult(pessoaTeste));

// b. Fun√ß√£o que aceita m√∫ltiplos arrays e retorna um √∫nico array combinado
function combineArrays(...arrays) {
  return [].concat(...arrays);
  // Alternativa moderna: return arrays.flat();
}

// Teste da fun√ß√£o combineArrays
const array1 = [1, 2];
const array2 = [3, 4];
const array3 = [5, 6];
console.log("Arrays combinados:", combineArrays(array1, array2, array3));
